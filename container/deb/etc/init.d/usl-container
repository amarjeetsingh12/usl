#!/bin/bash

### BEGIN INIT INFO
# Provides:          usl-container
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts the usl-container service
# Description:       This file is used to start the daemon
#                    and should be placed in /etc/init.d
### END INIT INFO



HOST_IP=$(hostname -f)
PIDFILE=/var/run/usl-container/usl-container.pid
JAVA_OPTIONS="-Xms24g -Xmx24g -server -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djava.net.preferIPv4Stack=true -XX:+UseG1GC -XX:MaxGCPauseMillis=30 -XX:+AggressiveOpts -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/var/log/usl-container/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1M -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=22211 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dhazelcast.jmx=true -Dhazelcast.jmx.detailed=true -Dcom.sun.management.jmxremote.local.only=false -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Dgap.usl.clientId=${2} -Dgap.usl.environment=${3}"
SCREENOUT=/dev/null

PAC=uslapp
PAC_GROUP="<your-group>"
PAC_USER="<your-user>"


### Helper Functions ###

function print_help() {
    echo "Usage: usl-container stop|restart|oor|bir|rotation_status|force_stop|status"
}

function print_help_start() {
    echo "Usage: start {clientId} {environment}"
}

function get_service_health_code() {
  response_code=`curl -w "%{http_code}" -o /dev/null -s "localhost:9999/elb-healthcheck"`
  if [ ${response_code} = "200" ]; then
    retval=0
  else
    retval=1
  fi
   return "$retval"
}

function start() {
    echo "Starting usl-container Service"
    /sbin/start-stop-daemon --start --oknodo \
                    --umask 000 --user ${PAC_USER} --chuid ${PAC_USER}  --group ${PAC_GROUP} \
                    --make-pidfile --pidfile ${PIDFILE} \
                    --exec /usr/bin/java -- ${JAVA_OPTIONS} -jar /usr/lib/usl-container/usl-container.jar \
                            server /etc/usl-container/containerV2.yml >> ${SCREENOUT} &

    if [ ! -f /var/run/usl-container/oor.txt ]; then
        status=1
        counter=0
        while [[ ${status} -ne 0 ]] && [[ ${counter} -lt 10 ]]; do
            sleep 2;
            counter=$(($counter+1));
            echo "Waiting For usl-container to Start $counter";
            get_service_health_code
            status=$?
        done

        status
        return $?
    else
        echo "usl-container is in OOR";
        sleep 10
        oor
        return 0;
    fi;
}

function stop() {

    echo "Stopping usl-container Service"
    /sbin/start-stop-daemon --stop --signal 9 --oknodo --user fk-gap-usl --pidfile ${PIDFILE} --chuid fk-gap-usl 2>&1 >> ${SCREENOUT}  &

     #Sync Start by waiting till service is up.
    status=200
    counter=0
    while [[ ${status} -ne 1 ]] && [[ ${counter} -lt 10 ]]; do
        sleep 2;
        counter=$(($counter+1));
        echo "Waiting For USL-CONTAINER Service to Stop $counter";
        get_service_health_code
        status=$?
    done
     get_service_health_code
    if [ $? -eq 0 ]; then
        echo "usl-container Service Stop Failed";
        return 2;
    else
        echo "usl-container Service Stop Complete";
        return 0;
    fi;
}

function restart() {
    if status 2>&1 > /dev/null ; then
        stop
    fi
    start
    return $?
}

function force_stop() {
    stop
}

function status()
{
    get_service_health_code
    status=$?
    if [ ${status} -eq 0 ]; then
        echo "usl-container Service is Up";
        return 0;
    else
        echo "usl-container Service is Down";
        return 2;
    fi;
}


#Rotation Functions
function oor()
{
    curl -s -X POST "localhost:9999/oor" -o /dev/null
    #Wait for VIP to register oor
    sleep 4
    rotation_status
    wasOutOfRotation=$?
    if [ ${wasOutOfRotation} -eq 1 ]; then
      touch /var/run/usl-container/oor.txt
      return 0;
    else
      return 1;
    fi
}

function bir()
{
    curl -s -X POST "localhost:9999/bir" -o /dev/null
    rm /var/run/usl-container/oor.txt
    rotation_status
}

function rotation_status()
{
    get_service_health_code
    status=$?
    if [ ${status} -eq 0 ]; then
        echo "usl-container Service is In Rotation";
        return 0;
    else
        echo "usl-container Service is Out Of Rotation";
        return 1;
    fi;
}


if [ $# -eq 0 ]; then
    print_help
    exit 1
fi

if [ ${1} = "start" -a $# -lt 3 ]; then
    print_help_start
    exit 1
fi


if [ ${1} = "start"  -o ${1} = "stop"  -o ${1} = "restart" -o ${1} = "force_stop" -o ${1} = "status" -o ${1} = "oor" -o ${1} = "bir" -o ${1} = "rotation_status" ]; then
    :
else
   print_help
   exit 1
fi

${1}
